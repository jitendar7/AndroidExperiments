// To display data in RecyclerView, below are the things required

1. Data to display
2. 'RecyclerView' instance defined in layout file, which act as a container for the views
3. A 'layout' for 1 item of data ( or more depending on usecases)
4. A 'layout manager', handles the organization of the UI components in a view
5. 'viewHolder' which extends ViewHolder class, It contains the view information for displaying
one item from the item's layout
6. Adapter connects data to RecyclerView. It adapts the data, so it can be displayed in a ViewHolder
   A Recyclerview uses the adapter to figure out how to display the data on the screen

//recyclerview

implementation 'androidx.recyclerview:recyclerview:1.0.0'


<androidx.recyclerview.widget.RecyclerView
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"/>

//item_view

<?xml version="1.0" encoding="utf-8"?>
<TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:textSize="24sp"
    android:paddingStart="16dp"
    android:paddingEnd="16dp"
    android:layout_width="match_parent"
    android:layout_height="wrap_content" />

//creating viewholder
class TextItemViewHolder(val textView: TextView): RecyclerView.ViewHolder(textView)


//creating adapter
class SleepNightAdapter: RecyclerView.Adapter<TextItemViewHolder>() {

    var data = listOf<SleepNight>()
        set(value){
            field =  value
            notifyDataSetChanged()      //This is inefficient as this tells
                                        //'RecylerView' that entire list is potentially ineficient
        }

    override fun onBindViewHolder(holder: ViewHolder, position: Int){
        val item = data[position]
        holder.bind(item)
    }


    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder{
        return ViewHolder.from(parent)
    }

    class ViewHolder private constructor(itemView: View): RecyclerView.ViewHolder(itemView){
        val sleepLength: TextView = itemView.findViewById(R.id.sleep_length)
        val quality: TextView = itemView.findViewById(R.id.quality_string)
        ...

        fun bind(item: SleepNight){
            val res = itemView.context.resources
            sleepLength.text = convertDurationToFormatted(item.startTimeMilli, item.endTimeMilli, res)
            ...
        }

        companion object {
            fun from(parent: ViewGroup): ViewHolder{
                val layoutInflater = LayoutInflater.from(parent.context)
                val view = layoutInflater
                            .inflate(R.layout.list_item_sleep_night,parent,false)
                return ViewHolder(view)
            }
        }
    }

}


//attaching adapter to recyclerview

val adapter = SleepNightAdapter()
binding.sleepList.adapter = adapter


//binding can observe LiveData updates, in current activity
binding.setLifeCycleOwner(this)



//Recylerview has a class called 'DiffUtil' which is for calculating the difference between two lists.

//Refresh list content with DiffUtil
//Upgrade the SleepNightAdapter to use 'DiffUtil' to optimize the 'RecyclerView' for changes to the data

inside the SleepNightAdapter, create class


class SleepNightDiffCallback: DiffUtil.ItemCallback<SleepNight>() {

    // uses this test, to discover if an item was added, removed or moved
    override fun areItemsTheSame(oldItem: SleepNight, newItem: SleepNight): Boolean {
        return oldItem.nightId == newItem.nightId
    }

    // uses this test, to discover if the item has been updated
    override fun areContentsTheSame(oldItem: SleepNight, newItem: SleepNight): Boolean {
        return oldItem == newItem
    }
}

change the signature of SleepNightAdapter.kt file, to extend ListAdapter, adding DiffCallback

class SleepNightAdapter: ListAdapter<SleepNight, SleepNightAdapter.ViewHolder>(SleepNightDiffCallback()){

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
            val item = getItem(position)
            holder.bind(item)
        }
        ....
}

//Ref: https://github.com/google-developer-training/android-kotlin-fundamentals-apps/blob/master/RecyclerViewDiffUtilDataBinding/app/src/main/java/com/example/android/trackmysleepquality/sleeptracker/SleepTrackerFragment.kt

//ListAdapter provided a method  'submitList()' to tell ListAdapter that a new version of the list is available

  sleepTrackerViewModel.nights.observe(viewLifecycleOwner, Observer {
        it?.let {
            adapter.submitList(it)
        }
  })


// DataBinding with RecyclerView
class ViewHolder private constructor(val binding: ListItemSleepNightBinding) : RecyclerView.ViewHolder(binding.root){

    fun bind(item: SleepNight) {
            binding.sleep = item
            binding.executePendingBindings()    // for @BindingAdapter calls
     }

    companion object {
            fun from(parent: ViewGroup): ViewHolder {
                val layoutInflater = LayoutInflater.from(parent.context)
                val binding = ListItemSleepNightBinding.inflate(layoutInflater, parent, false)
                return ViewHolder(binding)
            }
        }
}

//Binding Adapters are adapters that take your data and adapt it into something that data binding can use to bind a view,
// using @BindingAdapter , take an item & a view ( can be extension function instead )

@BindingAdapter("sleepDurationFormatted")
fun TextView.setSleepQualityString(item: SleepNight){
    text = convert(item.sleepQuality, context.resources)
}

@BindingAdapter("sleepImage")
fun ImageView.setSleepImage(item: SleepNight){
    setImageResource()
}


app:sleepImage="@{sleep}"
app:sleepQualityString="@{sleep}"
app:sleepDurationFormatted="@{sleep}"


//LayoutManager
app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"

1 span = width of 1 column


The GridLayoutManager constructor takes up to four arguments: a context,
which is the activity, the number spans (columns, in the default vertical layout),
an orientation (default is vertical), and whether it's a reverse layout (default is false)

val manager = GridLayoutManager(activity, 3)    // default vertical layout

val manager = GridLayoutManager(activity, 5, GridLayoutManager.HORIZONTAL, false)


//sleepList=> recyclerview
binding.sleepList.layoutManager = manager


//Ref: https://github.com/google-developer-training/android-kotlin-fundamentals-apps/blob/master/RecyclerViewClickHandler/app/src/main/java/com/example/android/trackmysleepquality/sleeptracker/SleepNightAdapter.kt
//Adding click listener for recycleritem ( clickListener variable )
class SleepNightAdapter(val clickListener: SleepNightListener) : ListAdapter<SleepNight, SleepNightAdapter.ViewHolder>(SleepNightDiffCallback()) {

override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        holder.bind(getItem(position)!!, clickListener)

...
}

//create a listener class in adapter
class SleepNightListener(val clickListener: (sleepId: Long) -> Unit) {
    fun onClick(night: SleepNight) = clickListener(night.nightId)
}

val adapter = SleepNightAdapter(SleepNightListener { nightId ->
   Toast.makeText(context, "${nightId}", Toast.LENGTH_LONG).show()
})

<variable
    name="sleep"
    type="com.example.android.trackmysleepquality.database.SleepNight"/>

In layout, add

<variable
        name="clickListener"
        type="com.example.android.trackmysleepquality.sleeptracker.SleepNightListener" />

android:onClick="@{() -> clickListener.onClick(sleep)}"
