//Ref: https://codelabs.developers.google.com/codelabs/android-workmanager-kt/index.html?index=..%2F..ads19#3

//    implementation "androidx.work:work-runtime-ktx:$versions.work"

//pre-fetching the data once in a day

//WorkManager is for background work,
"Deferrable" => work not required to run immediately
eg: sending analytics data, syncing data
"Guaranteed" execution => task will run even when the device restarts

WorkManager will use an appropriate way either JobScheduler => API level 23+ (or)
a combination of AlarmManager & BroadcastReceiver


Adding WorkManager
implementation "android.arch.work:work-runtime-ktx:$work_version"


//Create background worker

Worker, class where you define actual work to run in the background
 extend this class, override doWork()

WorkRequest, it represents a request to run the worker in background, to configure
how & when to run the worker task, with help of Constraints such as device plugged in or WIFI connected

WorkManager, schedules & runs your WorkRequest



//Creating worker

class RefreshDataWorker(appContext: context, params: WorkParameters) : CoroutineWorker(appContext, params){
    override suspend fun doWork(): Result {     // this method is called on a background thread
      return Result.success()
    }
}

doWork() method performs work synchronously, and should return a ListenableWorker.Result object
THe Android System gives a Worker a maximum of 10mins to finish the execution and return a
ListenableWorker.Result object

To create ListenableWorker.Result object, call one of the following static methods to indicate the
completion status of the background work:

Result.success() - work completed successfully
Result.failure() - work completed with a permanent failure
Result.retry() - work encountered a transient failure & should be retried


override suspend fun doWork(): Result {
       val database = getDatabase(applicationContext)
       val repository = VideosRepository(database)
       try {
           repository.refreshVideos()
       } catch (e: HttpException) {
           return Result.retry()
       }
       return Result.success()
}

//Worker defines a unit of work,  and the WorkRequest defines how & when work should be run.
//There are two concrete implementations of the 'WorkRequest' class
- OneTimeWorkRequest ( is for on-off tasks, happens only once )
- PeriodicWorkRequest ( for periodic work, work that repeats at intervals )

Ref: https://github.com/google-developer-training/android-kotlin-fundamentals-apps/blob/master/DevBytesWorkManager/app/src/main/java/com/example/android/devbyteviewer/DevByteApplication.kt


//Define a periodic request in 'application',
setupRecurringWork(){
    val repeatingRequest = PeriodicWorkRequestBuilder<RefreshDataWorker>(1, TimeUnit.DAYS)      //run once a day
           .build()
}

//schedule a WorkRequest with WorkManager
WorkManager.getInstance().enqueueUniquePeriodicWork(
       RefreshDataWorker.WORK_NAME,
       ExistingPeriodicWorkPolicy.KEEP,
       repeatingRequest)

Call this in onCreate, but with a coroutine

applicationScope.launch {
       Timber.plant(Timber.DebugTree())
       setupRecurringWork()
}

If pending(uncompleted) work exists with the same name, the ExistingPeriodicWorkPolicy.KEEP parameter
makes the WorkManager keep the previous periodic work and discard the new work request


//Add Constraints, criteria when to execute a work request

// This is the final functionality, this work request will run in the background as long as the app is installed,
private fun setupRecurringWork() {

       val constraints = Constraints.Builder()
               .setRequiredNetworkType(NetworkType.UNMETERED)
               .setRequiresBatteryNotLow(true)
               .setRequiresCharging(true)
               .apply {
                   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                       setRequiresDeviceIdle(true)
                   }
               }
               .build()

       val repeatingRequest = PeriodicWorkRequestBuilder<RefreshDataWorker>(1, TimeUnit.DAYS)
               .setConstraints(constraints)
               .build()

       Timber.d("Periodic Work request for sync is scheduled")
       WorkManager.getInstance().enqueueUniquePeriodicWork(
               RefreshDataWorker.WORK_NAME,
               ExistingPeriodicWorkPolicy.KEEP,
               repeatingRequest)
   }


// Steps
1. Create a worker, by extending Worker & overriding doWork
2. Get WorkManager instance using WorkManager.getInstance(application)
3. Enqueue the WorkRequest in WorkManager (OneTimeWorkRequest / PeriodicWorkRequest )
   workManager.enqueue(OneTimeWorkRequest.from(BlurWorker::class.java))


Create Data input object
'Data' objects are lightweight containers for key/value pairs, meant to store small amount of data
that is passed in & out of WorkRequest

eg:
val builder = Data.Builder()
imageUri?.let {
    builder.putString(KEY_IMAGE_URI,imageUri.toString())
}
return builder.build()


pass the DataObject to worker request
val blurRequest = OneTimeWorkRequestBuilder<BlurWorker>()
            .setInputData(createInputDataForUri())
            .build()

workManager.enqueue(blurRequest)


In the doWork(),

val resourceUri = inputData.getString(KEY_IMAGE_URI)

return the output Data
val outputData = workDataOf(KEY_IMAGE_URI to outputUri.toString())
Result.success(outputData)

Ref: https://codelabs.developers.google.com/codelabs/android-workmanager-kt/index.html?index=..%2F..ads19#5

Chaining the work:
WorkManager allows to create a separate WorkerRequest's that run in order or parallel

var continuation = workManager.beginWith(OneTimeWorkRequest.from(CleanupWorker::class.java))

//Add WorkRequest to blur the image
val blurRequest = OneTimeWorkRequest.Builder(BlurWorker::class.java)
                  .setInputData(createInputDataForUri())
                  .build()

continuation = continuation.then(blurRequest)

//Add WorkRequest to save the image to the filesystem
val save = OneTimeWorkRequest.Builder(SaveImageToFileWorker::class.java).build()

continuation = continuation.then(save)

//Actually start the work
continuation.enqueu()

//Blurring number of times
// Add WorkRequests to blur the image the number of times requested
    for (i in 0 until blurLevel) {
        val blurBuilder = OneTimeWorkRequestBuilder<BlurWorker>()

        // Input the Uri if this is the first blur operation
        // After the first blur operation the input will be the output of previous
        // blur operations.
        if (i == 0) {
            blurBuilder.setInputData(createInputDataForUri())
        }

        continuation = continuation.then(blurBuilder.build())
    }


//ensure unique work
( use, .beginUniqueWork, 'REPLACE' -> if the user decides to stop the blur of first image & start the second one )
var continuation = workManager
        .beginUniqueWork(
                IMAGE_MANIPULATION_WORK_NAME,
                ExistingWorkPolicy.REPLACE,
                OneTimeWorkRequest.from(CleanupWorker::class.java)
        )

//We can get the status of any work request by getting a LiveData that holds a 'WorkInfo'
// whether the work is BLOCKED, CANCELLED, ENQUEUED, FAILED, RUNNING, or SUCCEDED

put a TAG to a work request
'getWorkInfosByTagLiveData()' will give the WorkInfo LiveData<List<WorkInfos>>

WorkManager, cancel the work by id, tag & by unique chain name
    workManager.cancelUniqueWork(IMAGE_MANIPULATION_WORK_NAME)


Adding constrains
// Create charging constraint
val constraints = Constraints.Builder()
        .setRequiresCharging(true)
        .build()