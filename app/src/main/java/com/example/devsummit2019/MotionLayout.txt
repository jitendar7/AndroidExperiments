Ref: https://codelabs.developers.google.com/codelabs/motion-layout/index.html?index=..%2F..ads19#3
MotionLayout is a subclass of ConstraintLayout

// convert constraintlayout to motionlayout
after conversion,
see the app:layoutDescription="@xml/step1"

step1.xml is the motionscene
inside that define transition & constrain set

<!-- Describe the animation for activity_step1.xml -->
<MotionScene xmlns:app="http://schemas.android.com/apk/res-auto"
            xmlns:android="http://schemas.android.com/apk/res/android">
   <!-- A transition describes an animation via start and end state -->
   <Transition
           app:constraintSetStart="@+id/start"
           app:constraintSetEnd="@+id/end"
           app:duration="2000">
       <!-- MotionLayout will handle clicks on @id/star to "toggle" the animation between the start and end -->
       <OnClick
               app:targetId="@id/red_star"
               app:clickAction="toggle" />          // on click - toggle the constrainset
   </Transition>

   <!-- Constraints to apply at the end of the animation -->
   <ConstraintSet android:id="@+id/start">
       <Constraint
               android:id="@+id/red_star"
               android:layout_width="wrap_content"
               android:layout_height="wrap_content"
               app:layout_constraintStart_toStartOf="parent"
               app:layout_constraintTop_toTopOf="parent" />
   </ConstraintSet>

   <!-- Constraints to apply at the end of the animation -->
   <ConstraintSet android:id="@+id/end">
       <Constraint
               android:id="@+id/red_star"
               android:layout_width="wrap_content"
               android:layout_height="wrap_content"
               app:layout_constraintEnd_toEndOf="parent"
               app:layout_constraintBottom_toBottomOf="parent" />
   </ConstraintSet>
</MotionScene>


//enabling debugging for motion layout
       app:motionDebug="SHOW_PATH" >


Modifying a path
'KeyPosition'

KeyFrameSet => is a child of a Transaction, and it is set to all KeyFrames, such as KeyPosition

<KeyFrameSet>
   <KeyPosition
           app:framePosition="50"
           app:motionTarget="@id/moon"
           app:keyPositionType="parentRelative"
           app:percentY="0.5"
   />
</KeyFrameSet>


app:KeyPositionType -> 'determines how MotionLayout will modify the path according to percentX or percentY'
'parentRelative', 'pathRelative', 'deltaRelative'

Adding custom attributes to keyposition

<KeyAttribute
       app:framePosition="0"
       app:motionTarget="@id/moon">
   <CustomAttribute
           app:attributeName="colorFilter"
           app:customColorValue="#FFFFFF"
   />
</KeyAttribute>


Adding animation on onSwipe, instead of click
<OnSwipe
       app:touchAnchorId="@id/moon"
       app:touchAnchorSide="bottom"
       app:dragDirection="dragRight"        //but you can tell MotionLayout which direction to track
/>

MotionLayout with CoordinatorLayout,
add these properties to MotionLayout
android:minHeight="80dp"
app:layout_scrollFlags="scroll|enterAlways|snap|exitUntilCollapsed"


Adding listener to appBarLayout, and changing the motion layout progress

val appBarLayout: AppBarLayout = findViewById(R.id.appbar_layout)
val motionLayout: MotionLayout = findViewById(R.id.motion_layout)

val listener = AppBarLayout.OnOffsetChangedListener { unused, verticalOffset ->
   val seekPosition = -verticalOffset / appBarLayout.totalScrollRange.toFloat()
   motionLayout.progress = seekPosition
}

appBarLayout.addOnOffsetChangedListener(listener)